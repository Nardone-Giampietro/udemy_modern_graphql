type Query {
    comments: [Comment]!
    users(query: String): [User!]!
    posts(query: String): [Post!]!
    me: User!
    post: Post!
}

enum UserRole {
    ADMIN
    GUEST
}

enum MutationType {
    UPDATED
    DELETED
    CREATED
}

type User {
    id: ID!
    name: String!
    email: String!
    age: Int
    posts: [Post]!
    comments: [Comment]!
}
type Comment {
    id: ID!
    text: String!
    author: User!
    post: Post!
}
type Product {
    title: String!
    price: Float!
    releaseYear: Int
    rating: Float
    inStock: Boolean
}
type Post {
    id: ID!
    title: String!
    body: String!
    published: Boolean!
    author: User!
    comments: [Comment]!
}


type Subscription {
    comment(postId: ID!): CommentSubscriptionPayload!
    onCreatePost: PostSubscriptionPayload!
    onDeletePost: PostSubscriptionPayload!
    onUpdatePost: PostSubscriptionPayload!
}

type PostSubscriptionPayload{
    mutation: MutationType!
    data: Post!
}
type CommentSubscriptionPayload{
    mutation: MutationType!
    data: Comment!
}

type Mutation {
    count: Int!
    createUser(input: CreateUserInput!): User!
    deleteUser(input: DeleteUserInput!): User!
    updateUser(input: UpdateUserInput!): User!
    createPost(input: CreatePostInput!): Post!
    deletePost(input: DeletePostInput!): Post!
    updatePost(input: UpdatePostInput!): Post!
    createComment(input: CreateCommentInput!): Comment!
    deleteComment(input: DeleteCommentInput!): Comment!
    updateComment(input: UpdateCommentInput!): Comment!
},
input CreateCommentInput{
    author: ID!
    text: String!
    post: ID!
},
input DeleteCommentInput{
    commentId: ID!
}
input UpdateCommentInput{
    id: ID!
    text: String
}
input CreatePostInput {
    title: String!
    body: String!
    published: Boolean!
    author: ID!
}
input UpdatePostInput{
    id: ID!
    title: String
    body: String
    published: Boolean
}
input DeletePostInput {
    postId: ID!
}
input CreateUserInput {
    email: String!
    name: String!
    age: Int
}
input DeleteUserInput {
    userId: ID!
}

input UpdateUserInput {
    id: ID!
    name: String
    email: String
    age: Int
}